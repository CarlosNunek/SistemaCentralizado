name: Flask Docker Deployment Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize]

jobs:

  avoid_redundancy:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Redundant Builds
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install flake8
      - name: Lint with flake8
        run: flake8 BackendSC --statistics
        
  test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r BackendSC/requirements.txt
          pip install pytest

      - name: Skip tests (no test files yet)
        run: echo "No tests available yet"

  build_and_push_docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./BackendSC
          file: ./BackendSC/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
          
  deploy_to_ec2:
    needs: build_and_push_docker
    runs-on: ubuntu-latest
    steps:
      - name: Connect to EC2 and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}

          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
            docker stop flask || true && docker rm flask || true
            docker run -d --restart always --name flask -p 80:5000 ${{ secrets.DOCKER_USERNAME }}/flask-app:latest


